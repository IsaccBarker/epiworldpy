#include "database.hpp"
#include "interface.hpp"
#include "models/diffnet.hpp"
#include "models/model.hpp"
#include "models/seir.hpp"
#include "models/seirconn.hpp"
#include "models/seird.hpp"
#include "models/sir.hpp"
#include "models/sirconn.hpp"
#include "models/sird.hpp"
#include "models/sirdconn.hpp"
#include "models/sis.hpp"
#include "models/sisd.hpp"
#include "models/surv.hpp"

#include <unordered_map>

#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h> /* silently fails when removed. */

#define MODEL_OF(model)                                                        \
	py::class_<epimodels::model<int>, std::shared_ptr<epimodels::model<int>>>

namespace py = pybind11;
using namespace epiworld;

#define STRINGIFY(x) #x
#define MACRO_STRINGIFY(x) STRINGIFY(x)

PYBIND11_MODULE(_core, m) {
	m.doc() = R"pbdoc(
        Epiworld Python Wrapper
        -----------------------

        .. currentmodule:: epiworldpy

        .. autosummary::
           :toctree: _generate

           ModelSEIR
    )pbdoc";

	/* Export everything we know. For some reason, we have to create the classes
	 * here, instead of just passing in the module to the function and having it
	 * do it for us; we get a duplicate symbol error at Python import-time.
	 *
	 * TODO: Try using `py::model_` instead of `py::model`? */
	auto model = py::class_<Model<int>, std::shared_ptr<Model<int>>>(
		m, "Model", "A generic model of some kind; a parent class.");
	auto database = py::class_<DataBase<int>, std::shared_ptr<DataBase<int>>>(
		m, "DataBase", "A container for data generated by a model run.");

	epiworldpy::export_model(model);
	epiworldpy::export_database(database);

	/* Export models.
	 *
	 * TODO: Make Python model proxys inhereit from an interface and do this in
	 * a loop.
	 */
	auto diffnet =
		MODEL_OF(ModelDiffNet)(m, "ModelDiffNet", "A network diffusion model.");
	auto seir =
		MODEL_OF(ModelSEIR)(m, "ModelSEIR",
							"A model with four compartments: susceptible, "
							"exposed, infectious, and recovered.");
	auto seirconn = MODEL_OF(ModelSEIRCONN)(
		m, "ModelSEIRCONN",
		"A model with four compartments: susceptible, exposed, infectious, and "
		"recovered.");
	auto seird =
		MODEL_OF(ModelSEIRD)(m, "ModelSEIRD",
							 "A model with five compartments: susceptible, "
							 "exposed, infectious, recovered, and dead.");
	auto sir = MODEL_OF(ModelSIR)(m, "ModelSIR",
								  "A model with three compartments: "
								  "susceptible, infectious, and recovered.");
	auto sirconn =
		MODEL_OF(ModelSIRCONN)(m, "ModelSIRCONN",
							   "A model with three compartments: susceptible, "
							   "infectious, and recovered.");
	auto sird =
		MODEL_OF(ModelSIRD)(m, "ModelSIRD",
							"A model with four compartments: susceptible, "
							"infectious, recovered, and dead.");
	auto sirdconn =
		MODEL_OF(ModelSIRDCONN)(m, "ModelSIRDCONN",
								"A model with four compartments: susceptible, "
								"infectious, recovered, and dead.");
	auto sis = MODEL_OF(ModelSIS)(
		m, "ModelSIS",
		"A model wth two compartments: susceptible and infectious.");
	auto sisd = MODEL_OF(ModelSISD)(
		m, "ModelSISD",
		"A model wth three compartments: susceptible, infectious, and death.");
	auto surv = MODEL_OF(ModelSURV)(
		m, "ModelSURV",
		"A model where agents may be isolated, even when asymptomatic.");

	epiworldpy::export_diffnet_constructor(m);
	epiworldpy::export_diffnet(diffnet);
	epiworldpy::export_seir(seir);
	epiworldpy::export_seir_constructor(m);
	epiworldpy::export_seirconn(seirconn);
	epiworldpy::export_sierconn_constructor(m);
	epiworldpy::export_seird(seird);
	epiworldpy::export_seird_constructor(m);
	epiworldpy::export_sir(sir);
	epiworldpy::export_sir_constructor(m);
	epiworldpy::export_sirconn(sirconn);
	epiworldpy::export_sirconn_constructor(m);
	epiworldpy::export_sird(sird);
	epiworldpy::export_sird_constructor(m);
	epiworldpy::export_sirdconn(sirdconn);
	epiworldpy::export_sirdconn_constructor(m);
	epiworldpy::export_sis(sis);
	epiworldpy::export_sis_constructor(m);
	epiworldpy::export_sisd(sisd);
	epiworldpy::export_sisd_constructor(m);
	epiworldpy::export_surv(surv);
	epiworldpy::export_surv_constructor(m);

#ifdef VERSION_INFO
	/* Give the real version. */
	m.attr("__version__") = MACRO_STRINGIFY(VERSION_INFO);
#else
	/* Also give the real version, but prefix with 'dev'. */
	m.attr("__version__") = "dev-" MACRO_STRINGIFY(VERSION_INFO);
#endif
}
